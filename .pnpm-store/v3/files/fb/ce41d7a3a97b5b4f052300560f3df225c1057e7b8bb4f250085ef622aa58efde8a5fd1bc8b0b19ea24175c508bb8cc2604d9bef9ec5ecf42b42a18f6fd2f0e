"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
exports.__esModule = true;
exports.setSemverRangesToDisk = exports.setSemverRanges = void 0;
var get_wrappers_1 = require("./lib/get-wrappers");
var get_installations_1 = require("./lib/installations/get-installations");
var set_semver_range_1 = require("./lib/set-semver-range");
var write_if_changed_1 = require("./lib/write-if-changed");
var setSemverRanges = function (wrapper, options) {
    var e_1, _a;
    var installationsIterator = get_installations_1.getInstallations([wrapper], options);
    var setSemverRange = set_semver_range_1.setSemverRange(options);
    try {
        for (var installationsIterator_1 = __values(installationsIterator), installationsIterator_1_1 = installationsIterator_1.next(); !installationsIterator_1_1.done; installationsIterator_1_1 = installationsIterator_1.next()) {
            var installation = installationsIterator_1_1.value;
            var name = installation.name, type = installation.type, version = installation.version;
            var dependencies = installation.source.contents[type];
            if (dependencies) {
                dependencies[name] = setSemverRange(version);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (installationsIterator_1_1 && !installationsIterator_1_1.done && (_a = installationsIterator_1["return"])) _a.call(installationsIterator_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
exports.setSemverRanges = setSemverRanges;
var setSemverRangesToDisk = function (options) {
    get_wrappers_1.getWrappers({ source: options.source }).forEach(function (wrapper) {
        write_if_changed_1.writeIfChanged(options.indent, wrapper, function () {
            exports.setSemverRanges(wrapper, options);
        });
    });
};
exports.setSemverRangesToDisk = setSemverRangesToDisk;
